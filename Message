package gyyzp.message;

import gyyzp.utils.Utility;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;



public class Message {

	// 窗体图片
	final static public Image LOAD_WINDOW_CANVAS = Utility
			.loadImage("system/window.png");

	// 窗体消息框image
	static public Image LOAD_WINDOW_MESSAGE = null;

	// 窗体浮标image
	static public Image LOAD_WINDOW_BUOYAGE = null;

	// 窗体frame
	static public Image LOAD_WINDOW_FRAME = null;

	// 窗体cursor
	static public Image LOAD_WINDOW_CURSOR = null;

	/**
	 * 释放生成的图像
	 *
	 */
	public static void freeImage() {
		LOAD_WINDOW_MESSAGE = null;
		LOAD_WINDOW_BUOYAGE = null;
		LOAD_WINDOW_FRAME = null;
		LOAD_WINDOW_CURSOR = null;
	}

	/**
	 * 获得鼠标图案
	 * 
	 * @param select
	 * @return
	 */
	public static Image getMessageCursor(boolean isRigth) {
		if (!isRigth) {
			return Message.loadCursorLeft();
		} else {
			return Message.loadCursorRight();
		}
	}

	/**
	 * 生成对话框图片
	 * 
	 * @param x1
	 * @param x2
	 * @param y1
	 * @param y2
	 * @return
	 */
	public static Image getMessageImage(int width, int height) {
		return Message.loadMessageWindow(width, height);
	}

	/**
	 * 生成模糊效果的对话框图片
	 * 
	 * @param x1
	 * @param x2
	 * @param y1
	 * @param y2
	 * @return
	 */
	public static Image getMessageImage(int x1, int x2, int y1, int y2) {
		int j = x2 - x1;
		int k = y2 - y1;
		int ai[] = new int[j * k];
		int l = Color.black.getRGB();
		for (int i1 = 0; i1 < j * k; i1++) {
			int j1 = i1 / j;
			if (j1 % 2 == 0)
				ai[i1] = i1 % 2 != 0 ? 0 : l;
			else
				ai[i1] = i1 % 2 != 0 ? l : 0;
		}
		MemoryImageSource imagesource = new MemoryImageSource(j, k, ai, 0, j);
		return Toolkit.getDefaultToolkit().createImage(
				(ImageProducer) imagesource);
	}

	/**
	 * 设定对话窗体
	 * 
	 * @param obj
	 * @param g
	 * @param img
	 * @param x1
	 * @param x2
	 * @param y1
	 * @param y2
	 */
	public static void setMessage(ImageObserver obj, Graphics g, Image img,
			int x1, int x2, int y1, int y2, boolean isFrame) {
		g.drawImage(img, x1, y1, obj);
		g.setColor(Color.white);
		if (isFrame) {
			g.drawRect(x1, y1, x2 - x1, y2 - y1);
		}
	}

	/**
	 * 设定有背景图的消息框
	 * 
	 * @param obj
	 * @param g
	 * @param x1
	 * @param y1
	 * @param x2
	 * @param y2
	 */
	public static void setWindowMessage(Graphics g, int x1, int y1, int x2,
			int y2) {
		Utility.setAlpha(g, 0.55f);
		Image image = Message.loadMessageWindow(x2 - x1, y2 - y1);
		g.drawImage(image, x1, y1, null);
		Utility.setAlpha(g, 1.0f);
	}

	/**
	 * 加载窗体外边框
	 * 
	 * @param obj
	 * @param g
	 * @param x1
	 * @param y1
	 * @param x2
	 * @param y2
	 */
	public static void setWindowFrame(Graphics g, int x1, int y1, int x2, int y2) {
		Image frame = Message.loadFrameWindow(x2 - x1, y2 - y1);
		g.drawImage(frame, x1, y1, null);
	}

	/**
	 * 选择框游标设置
	 * 
	 * @param flash
	 * @param select
	 * @param obj
	 * @param bg
	 * @param sourceName
	 * @param x1
	 * @param y1
	 * @param x2
	 * @param y2
	 */
	public static void setWindowBuoyageMessage(int select, int showWidth,
			int showHeight, Graphics bg, int x1, int y1, int x2, int y2) {
		int x = (x2 - x1) - 37;
		int y = (y2 - y1) / 5;
		// 浮标高
		int bHeight = y;
		// 设定浮标位置
		int setBuoYage = y1 + (bHeight * select) + 10 + select;
		Utility.setAlpha(bg, 0.5f);
		Image image = Message.loadBuoyageWindow(showWidth, showHeight);
		bg.drawImage(image, x, setBuoYage, null);
		Utility.setAlpha(bg, 1.0f);
	}

	public static void setWindowBuoyageMessage(int select, int showWidth,
			int showHeight, Graphics g, int x, int y) {
		g.drawImage(Message.loadCursorRight(), x, y, null);
	}

	/**
	 * 设定内容
	 * 
	 * @param g
	 * @param content
	 * @param FONT
	 * @param SPACE_FONT
	 * @param LEFT
	 * @param TOP
	 */
	public static void setMessageContent(Graphics g, String content, int FONT,
			int SPACE_FONT, int LEFT, int TOP, boolean select) {
		g.setFont(new Font("宋体", 1, 15));
		if (select)
			g.setColor(Color.white);
		else
			g.setColor(Color.gray);
		for (int j = 0; j < content.length(); j++) {
			g.drawString(content.substring(j, j + 1).toString(), FONT * j
					+ LEFT + 2, 1 * (FONT + SPACE_FONT) + FONT + 1 + TOP);
		}
	}

	public static Image loadCursorLeft() {
		return loadCursorWindow(true);
	}

	public static Image loadCursorRight() {
		return loadCursorWindow(false);
	}

	private static Image loadCursorWindow(boolean isLeft) {
		if (LOAD_WINDOW_CURSOR != null) {
			return LOAD_WINDOW_CURSOR;
		}
		int cs = 32;
		Image image = LOAD_WINDOW_CANVAS;
		int x1 = 128;
		int x2 = 160;
		int y1 = 96;
		int y2 = 128;
		if (!isLeft) {
			x1 += cs;
			x2 += cs;
		}
		try {
			LOAD_WINDOW_CURSOR = Utility.drawClipImage(image, cs, cs, x1, y1,
					x2, y2);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		return LOAD_WINDOW_CURSOR;
	}

	/**
	 * 加载窗体消息框背景图
	 * 
	 * @param sourceName
	 * @param showWidth
	 * @param showHeigth
	 * @return
	 */
	public final static Image loadMessageWindow(int showWidth, int showHeight) {
		if (LOAD_WINDOW_MESSAGE != null) {
			return LOAD_WINDOW_MESSAGE;
		}
		// 缓存主面板
		LOAD_WINDOW_MESSAGE = LOAD_WINDOW_CANVAS;
		try {
			LOAD_WINDOW_MESSAGE = Utility.drawClipImage(LOAD_WINDOW_MESSAGE,
					128, 128, 0, 0, 128, 128);
			LOAD_WINDOW_MESSAGE = Utility.drawClip(LOAD_WINDOW_MESSAGE, 0, 0,
					showWidth, showHeight);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return LOAD_WINDOW_MESSAGE;
	}

	/**
	 * 加载边框
	 * 
	 * @param showWidth
	 * @param showHeight
	 * @param nowDraw
	 * @return
	 */
	public final static Image loadFrameWindow(int showWidth, int showHeight) {
		if (LOAD_WINDOW_FRAME != null) {
			return LOAD_WINDOW_FRAME;
		}

		Image image = LOAD_WINDOW_CANVAS;
		Image center = Utility.createImage(showWidth, showHeight, true);
		Image left, right, up, down, iconleft, iconright, iconup, icondown;
		// 默认截取图原始宽与高
		int objWidth = 64;
		int objHeight = 64;
		int x1 = 128;
		int x2 = 192;
		int y1 = 0;
		int y2 = 64;
		int k = 8;
		try {
			image = Utility.drawClipImage(image, objWidth, objHeight, x1, y1,
					x2, y2);
			BufferedImage bufferImage = Utility.createImage(showWidth,
					showHeight, true);
			Graphics g = bufferImage.getGraphics();
			left = Utility.drawClipImage(image, k, showHeight, 0, k, k,
					objHeight - k);
			iconleft = Utility.drawClipImage(image, k, k, 0, 0, k, k);
			right = Utility.drawClipImage(image, k, showHeight, objWidth - k,
					k, objWidth, objHeight - k);
			iconright = Utility.drawClipImage(image, k, k, objWidth - k, 0,
					objWidth, k);
			up = Utility.drawClipImage(image, showWidth, k, k, 0, objWidth - k,
					k);
			iconup = Utility.drawClipImage(image, k, k, 0, objHeight - k, k,
					objHeight);
			down = Utility.drawClipImage(image, showWidth, k, k, objHeight - k,
					objWidth - k, objHeight);
			icondown = Utility.drawClipImage(image, k, k, objWidth - k,
					objHeight - k, objWidth, objHeight);
			g.drawImage(center, 0, 0, null);
			g.drawImage(left, 0, 0, null);
			g.drawImage(right, showWidth - k, 0, null);
			g.drawImage(up, 0, 0, null);
			g.drawImage(down, 0, showHeight - k, null);
			g.drawImage(iconleft, 0, 0, null);
			g.drawImage(iconright, showWidth - k, 0, null);
			g.drawImage(iconup, 0, showHeight - k, null);
			g.drawImage(icondown, showWidth - k, showHeight - k, null);
			LOAD_WINDOW_FRAME = bufferImage;
			g.dispose();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			left = null;
			right = null;
			up = null;
			down = null;
			image = null;
			iconleft = null;
			iconright = null;
			iconup = null;
			icondown = null;
		}
		return LOAD_WINDOW_FRAME;

	}

	/**
	 * 加载窗体浮标
	 * 
	 * @param sourceName
	 * @param showWidth
	 * @param showHeigth
	 * @return
	 */
	public final static Image loadBuoyageWindow(int showWidth, int showHeight) {
		if (LOAD_WINDOW_BUOYAGE != null) {
			return LOAD_WINDOW_BUOYAGE;
		}
		Image image = LOAD_WINDOW_CANVAS;
		Image left, right, center, up, down = null;
		// 默认截取图原始宽与高
		int objWidth = 32;
		int objHeight = 32;
		int x1 = 128;
		int x2 = 160;
		int y1 = 64;
		int y2 = 96;
		int k = 1;
		try {
			image = Utility.drawClipImage(image, objWidth, objHeight, x1, y1,
					x2, y2);
			BufferedImage bufferImage = Utility.createImage(showWidth,
					showHeight, false);
			Graphics g = bufferImage.getGraphics();
			left = Utility.drawClipImage(image, k, showHeight, 0, 0, k,
					objHeight);
			right = Utility.drawClipImage(image, k, showHeight, objWidth - k,
					0, objWidth, objHeight);
			center = Utility.drawClipImage(image, showWidth, showHeight, k, k,
					objWidth - k, objHeight - k);
			up = Utility.drawClipImage(image, showWidth, k, 0, 0, objWidth, k);
			down = Utility.drawClipImage(image, showWidth, k, 0, objHeight - k,
					objWidth, objHeight);
			g.drawImage(center, 0, 0, null);
			g.drawImage(left, 0, 0, null);
			g.drawImage(right, showWidth - k, 0, null);
			g.drawImage(up, 0, 0, null);
			g.drawImage(down, 0, showHeight - k, null);
			LOAD_WINDOW_BUOYAGE = bufferImage;
			g.dispose();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			left = null;
			right = null;
			center = null;
			up = null;
			down = null;
			image = null;
		}
		return LOAD_WINDOW_BUOYAGE;
	}
}
